import axios from 'axios';
import axiosRetry from 'axios-retry';

class ActionProvider {
  constructor(createChatBotMessage, setStateFunc) {
    this.createChatBotMessage = createChatBotMessage;
    this.setState = setStateFunc;
    this.userData = {};
    this.API_URL = 'http://localhost:5000/api';
    this.token = localStorage.getItem('token') || 'your_token_here';
    axiosRetry(axios, { retries: 3, retryDelay: (retryCount) => retryCount * 1000 });
    axios.defaults.timeout = 10000;
  }

  handleQuickReply = (option) => {
    switch (option) {
      case 'booking':
        this.handleBooking();
        break;
      case 'cancel':
        this.handleCancel();
        break;
      case 'status':
        this.handleCheckStatus();
        break;
      case 'services':
        this.showServices();
        break;
      default:
        this.handleDefault();
    }
  };

  async handleBooking() {
    this.setState(prev => ({
      ...prev,
      isBooking: true,
      isCanceling: false,
      isChecking: false,
      bookingStep: 'enterDetails',
      isLoading: false,
    }));

    const message = this.createChatBotMessage(
      "Vui l√≤ng cung c·∫•p th√¥ng tin ƒë·∫∑t l·ªãch theo ƒë·ªãnh d·∫°ng sau:\n\n" +
      "üìÖ Ng√†y: [dd/mm/yyyy]\n" +
      "‚è∞ Gi·ªù: [hh:mm]\n" +
      "üíà D·ªãch v·ª•: [T√™n d·ªãch v·ª•]\n\n" +
      "V√≠ d·ª•: Ng√†y: 20/10/2023, Gi·ªù: 14:30, D·ªãch v·ª•: C·∫Øt t√≥c"
    );

    this.addMessageToState(message);
  }

  async handleCancel() {
    this.setState(prev => ({
      ...prev,
      isBooking: false,
      isCanceling: true,
      isChecking: false,
      cancelCode: null,
      isLoading: false,
    }));

    const message = this.createChatBotMessage(
      "Vui l√≤ng nh·∫≠p m√£ l·ªãch h·∫πn b·∫°n mu·ªën h·ªßy. " +
      "B·∫°n c√≥ th·ªÉ t√¨m th·∫•y m√£ n√†y trong email x√°c nh·∫≠n ho·∫∑c trang l·ªãch s·ª≠ ƒë·∫∑t l·ªãch c·ªßa b·∫°n."
    );

    this.addMessageToState(message);
  }

  async handleCheckStatus() {
    this.setState(prev => ({
      ...prev,
      isBooking: false,
      isCanceling: false,
      isChecking: true,
      checkCode: null,
      isLoading: false,
    }));

    const message = this.createChatBotMessage(
      "Vui l√≤ng nh·∫≠p m√£ l·ªãch h·∫πn ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i. " +
      "N·∫øu b·∫°n kh√¥ng nh·ªõ m√£, t√¥i c√≥ th·ªÉ li·ªát k√™ c√°c l·ªãch h·∫πn g·∫ßn ƒë√¢y c·ªßa b·∫°n."
    );

    this.addMessageToState(message);
  }

  handleError(errorMessage) {
    const message = this.createChatBotMessage(
      `R·∫•t ti·∫øc, c√≥ l·ªói x·∫£y ra: ${errorMessage}\n\n` +
      "B·∫°n vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ qua s·ªë ƒëi·ªán tho·∫°i 0123.456.789"
    );

    this.addMessageToState(message);
    this.setState(prev => ({ ...prev, isLoading: false }));
  }

  handleDefault() {
    const message = this.createChatBotMessage(
      "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ:\n\n" +
      "1. ƒê·∫∑t l·ªãch h·∫πn m·ªõi\n" +
      "2. H·ªßy l·ªãch h·∫πn\n" +
      "3. Ki·ªÉm tra tr·∫°ng th√°i l·ªãch h·∫πn\n" +
      "4. Xem danh s√°ch d·ªãch v·ª•\n\n" +
      "Vui l√≤ng ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn tr√™n.",
      { widget: "quickReplies" }
    );

    this.addMessageToState(message);
    this.setState(prev => ({ ...prev, isLoading: false }));
  }

  async showServices() {
    this.setState(prev => ({ ...prev, isLoading: true }));
    try {
      const response = await axios.get(`${this.API_URL}/services`, {
        headers: { Authorization: `Bearer ${this.token}` },
      });
      const services = response.data;

      let servicesMessage = "Ch√∫ng t√¥i c√≥ c√°c d·ªãch v·ª• sau:\n\n";
      services.forEach(service => {
        servicesMessage += `üîπ ${service.name} - ${service.price} VND\n`;
        servicesMessage += `   ${service.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n\n`;
      });

      const message = this.createChatBotMessage(servicesMessage);
      this.addMessageToState(message);
    } catch (error) {
      this.handleError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª•");
    } finally {
      this.setState(prev => ({ ...prev, isLoading: false }));
    }
  }

  handleBookingSuccess(appointment) {
    const message = this.createChatBotMessage(
      `üéâ ƒê·∫∑t l·ªãch th√†nh c√¥ng!\n\n` +
      `M√£ l·ªãch h·∫πn: ${appointment._id}\n` +
      `D·ªãch v·ª•: ${appointment.service}\n` +
      `Th·ªùi gian: ${new Date(appointment.date).toLocaleString('vi-VN')}\n\n` +
      `B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n trong √≠t ph√∫t n·ªØa.`
    );

    this.addMessageToState(message);
    this.setState(prev => ({
      ...prev,
      isBooking: false,
      bookingStep: null,
      isLoading: false,
    }));
  }

  addMessageToState(message) {
    this.setState(prev => ({
      ...prev,
      messages: [...prev.messages, message],
    }));
  }

  async processBookingInfo(message) {
    const step = this.state.bookingStep;

    if (step === 'enterDetails') {
      const dateMatch = message.match(/(\d{1,2}\/\d{1,2}\/\d{4})/);
      const timeMatch = message.match(/(\d{1,2}:\d{2})/);
      const serviceMatch = message.match(/D·ªãch v·ª•:\s*(.+)/i);

      if (!dateMatch || !timeMatch || !serviceMatch) {
        this.addMessageToState(
          this.createChatBotMessage(
            "Th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß. Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng:\n\n" +
            "üìÖ Ng√†y: [dd/mm/yyyy]\n" +
            "‚è∞ Gi·ªù: [hh:mm]\n" +
            "üíà D·ªãch v·ª•: [T√™n d·ªãch v·ª•]\n\n" +
            "V√≠ d·ª•: Ng√†y: 20/10/2023, Gi·ªù: 14:30, D·ªãch v·ª•: C·∫Øt t√≥c"
          )
        );
        return;
      }

      this.setState(prev => ({ ...prev, isLoading: true }));
      try {
        const servicesRes = await axios.get(`${this.API_URL}/services`, {
          headers: { Authorization: `Bearer ${this.token}` },
        });
        const serviceExists = servicesRes.data.some(s =>
          s.name.toLowerCase() === serviceMatch[1].toLowerCase()
        );

        if (!serviceExists) {
          this.addMessageToState(
            this.createChatBotMessage("D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c xem danh s√°ch d·ªãch v·ª•.")
          );
          this.showServices();
          return;
        }

        const [day, month, year] = dateMatch[0].split('/');
        const [hours, minutes] = timeMatch[0].split(':');
        const appointmentDate = new Date(year, month - 1, day, hours, minutes);

        if (appointmentDate < new Date()) {
          this.addMessageToState(
            this.createChatBotMessage("Th·ªùi gian ƒë·∫∑t l·ªãch kh√¥ng th·ªÉ trong qu√° kh·ª©. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.")
          );
          return;
        }

        const availabilityRes = await axios.post(
          `${this.API_URL}/appointments/check-availability`,
          { date: appointmentDate.toISOString() },
          { headers: { Authorization: `Bearer ${this.token}` } }
        );

        if (!availabilityRes.data.available) {
          this.addMessageToState(
            this.createChatBotMessage("Th·ªùi gian n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. Vui l√≤ng ch·ªçn th·ªùi gian kh√°c.")
          );
          return;
        }

        this.userData.bookingInfo = {
          service: serviceMatch[1],
          date: appointmentDate,
          name: this.userData.name || '',
          phone: this.userData.phone || '',
          email: this.userData.email || '',
        };

        if (!this.userData.name) {
          this.setState(prev => ({ ...prev, bookingStep: 'enterName' }));
          this.addMessageToState(this.createChatBotMessage("Vui l√≤ng cho bi·∫øt t√™n c·ªßa b·∫°n:"));
        } else if (!this.userData.phone) {
          this.setState(prev => ({ ...prev, bookingStep: 'enterPhone' }));
          this.addMessageToState(this.createChatBotMessage("Vui l√≤ng cung c·∫•p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n:"));
        } else if (!this.userData.email) {
          this.setState(prev => ({ ...prev, bookingStep: 'enterEmail' }));
          this.addMessageToState(this.createChatBotMessage("Vui l√≤ng cung c·∫•p email c·ªßa b·∫°n:"));
        } else {
          this.confirmBooking();
        }
      } catch (err) {
        this.handleError("C√≥ l·ªói khi x·ª≠ l√Ω ƒë·∫∑t l·ªãch.");
      } finally {
        this.setState(prev => ({ ...prev, isLoading: false }));
      }
    } else if (step === 'enterName') {
      this.userData.name = message.trim();
      this.setState(prev => ({ ...prev, bookingStep: 'enterPhone' }));
      this.addMessageToState(this.createChatBotMessage("Vui l√≤ng cung c·∫•p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n:"));
    } else if (step === 'enterPhone') {
      const phoneRegex = /^\d{10,11}$/;
      if (!phoneRegex.test(message.trim())) {
        this.addMessageToState(this.createChatBotMessage("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i (10 ho·∫∑c 11 s·ªë):"));
        return;
      }
      this.userData.phone = message.trim();
      this.setState(prev => ({ ...prev, bookingStep: 'enterEmail' }));
      this.addMessageToState(this.createChatBotMessage("Vui l√≤ng cung c·∫•p email c·ªßa b·∫°n:"));
    } else if (step === 'enterEmail') {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(message.trim())) {
        this.addMessageToState(this.createChatBotMessage("Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i:"));
        return;
      }
      this.userData.email = message.trim();
      this.confirmBooking();
    } else if (step === 'confirm') {
      this.processBookingConfirmation(message);
    }
  }

  async confirmBooking() {
    const { service, date, name, phone, email } = this.userData.bookingInfo;

    this.addMessageToState(
      this.createChatBotMessage(
        `Vui l√≤ng x√°c nh·∫≠n th√¥ng tin ƒë·∫∑t l·ªãch:\n\n` +
        `D·ªãch v·ª•: ${service}\n` +
        `Th·ªùi gian: ${new Date(date).toLocaleString('vi-VN')}\n` +
        `T√™n: ${name}\n` +
        `S·ªë ƒëi·ªán tho·∫°i: ${phone}\n` +
        `Email: ${email}\n\n` +
        `B·∫°n c√≥ mu·ªën x√°c nh·∫≠n kh√¥ng?`,
        { widget: "confirmBooking" }
      )
    );

    this.setState(prev => ({ ...prev, bookingStep: 'confirm' }));
  }

  async processBookingConfirmation(response) {
    if (response.toLowerCase().includes('x√°c nh·∫≠n')) {
      const { service, date, name, phone, email } = this.userData.bookingInfo;
      this.setState(prev => ({ ...prev, isLoading: true }));
      try {
        const res = await axios.post(
          `${this.API_URL}/appointments`,
          { service, date: date.toISOString(), name, phone, email },
          { headers: { Authorization: `Bearer ${this.token}` } }
        );

        this.handleBookingSuccess(res.data.appointment);
      } catch (error) {
        this.handleError(error.response?.data?.message || error.message);
      } finally {
        this.setState(prev => ({ ...prev, isLoading: false }));
      }
    } else {
      this.addMessageToState(
        this.createChatBotMessage("ƒê√£ h·ªßy b·ªè ƒë·∫∑t l·ªãch. B·∫°n c√≥ mu·ªën ƒë·∫∑t l·∫°i kh√¥ng?", {
          widget: "quickReplies",
        })
      );
      this.setState(prev => ({
        ...prev,
        isBooking: false,
        bookingStep: null,
      }));
    }
  }

  async processCancelRequest(code) {
    this.setState(prev => ({ ...prev, isLoading: true }));
    try {
      const response = await axios.delete(
        `${this.API_URL}/appointments/${code}`,
        { headers: { Authorization: `Bearer ${this.token}` } }
      );

      this.addMessageToState(
        this.createChatBotMessage(
          `L·ªãch h·∫πn v·ªõi m√£ ${code} ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.\n\n` +
          `B·∫°n c√≥ c·∫ßn gi√∫p g√¨ th√™m kh√¥ng?`,
          { widget: "quickReplies" }
        )
      );

      this.setState(prev => ({
        ...prev,
        isCanceling: false,
        cancelCode: null,
      }));
    } catch (error) {
      this.handleError(error.response?.data?.message || "Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn. Vui l√≤ng ki·ªÉm tra m√£.");
    } finally {
      this.setState(prev => ({ ...prev, isLoading: false }));
    }
  }

  async processCheckRequest(code) {
    this.setState(prev => ({ ...prev, isLoading: true }));
    try {
      const response = await axios.get(
        `${this.API_URL}/appointments/${code}`,
        { headers: { Authorization: `Bearer ${this.token}` } }
      );

      const { service, date, status } = response.data;
      this.addMessageToState(
        this.createChatBotMessage(
          `Th√¥ng tin l·ªãch h·∫πn:\n\n` +
          `M√£ l·ªãch h·∫πn: ${code}\n` +
          `D·ªãch v·ª•: ${service}\n` +
          `Th·ªùi gian: ${new Date(date).toLocaleString('vi-VN')}\n` +
          `Tr·∫°ng th√°i: ${status}\n\n` +
          `B·∫°n c√≥ c·∫ßn gi√∫p g√¨ th√™m kh√¥ng?`,
          { widget: "quickReplies" }
        )
      );

      this.setState(prev => ({
        ...prev,
        isChecking: false,
        checkCode: null,
      }));
    } catch (error) {
      this.handleError(error.response?.data?.message || "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn. Vui l√≤ng ki·ªÉm tra m√£.");
    } finally {
      this.setState(prev => ({ ...prev, isLoading: false }));
    }
  }
}

export default ActionProvider;
